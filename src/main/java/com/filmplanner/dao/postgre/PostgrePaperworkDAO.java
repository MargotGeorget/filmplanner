package com.filmplanner.dao.postgre;

import com.filmplanner.dao.AbstractDAOFactory;
import com.filmplanner.dao.PaperworkDAO;
import com.filmplanner.dao.ProjectDAO;
import com.filmplanner.models.Paperwork;
import com.filmplanner.models.Project;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PostgrePaperworkDAO implements PaperworkDAO {

    private Connection connection;

    public PostgrePaperworkDAO(Connection connection) {
        this.connection = connection;
    }

    /**
     * Creates a new Paperwork inside the database.
     *
     * @param paperwork the Paperwork which will be insterted inside the database
     * @return an instance of the created Paperwork with the id generated by the database; null if there was an SQLException
     */
    @Override
    public Paperwork create(Paperwork paperwork, Long projectId) {
        Paperwork createdPaperwork = null;
        try {
            String query = "INSERT INTO paperwork (file_name, directory_path, description, project_id) VALUES (?, ?, ?, ?)";
            PreparedStatement statement = this.connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, paperwork.getFileName());
            statement.setString(2, paperwork.getDirectoryPath());
            statement.setString(3, paperwork.getDescription());
            statement.setLong(4, projectId);

            if (statement.executeUpdate() > 0) {
                // some rows were altered
                ResultSet resultSet = statement.getGeneratedKeys();
                resultSet.next();
                Long generatedPaperworkId = resultSet.getLong("paperwork_id");
                createdPaperwork = new Paperwork(generatedPaperworkId, paperwork);
                resultSet.close();
                statement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return createdPaperwork;
    }

    /**
     * Gets all Paperworks of a project.
     *
     * @param project the project we want the paperworks of
     * @return an array of Paperwork containing project's paperworks
     */
    @Override
    public Paperwork[] findManyByProject(Project project) {
        try {

            List<Paperwork> paperworks = new ArrayList<>();
            String query = "SELECT paperwork_id, file_name, directory_path, description " +
                    "FROM paperwork WHERE paperwork.project_id = " + project.getId();
            PreparedStatement statement = this.connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                paperworks.add(new Paperwork(
                        resultSet.getLong("paperwork_id"),
                        resultSet.getString("file_name"),
                        resultSet.getString("directory_path"),
                        resultSet.getString("description")
                ));
            }

            resultSet.close();
            statement.close();
            return paperworks.toArray(new Paperwork[0]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Deletes a Paperwork from the database.
     *
     * @param id the id of the paperwork to delete
     */
    @Override
    public void delete(Long id) {
        try {
            String query = "DELETE FROM paperwork WHERE paperwork_id = " + id;
            PreparedStatement statement = this.connection.prepareStatement(query);
            statement.executeUpdate();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        AbstractDAOFactory factory = PostgreDAOFactory.getInstance();
        ProjectDAO projectDAO = factory.getProjectDAO();
        PaperworkDAO paperworkDAO = factory.getPaperworkDAO();

        Project project = projectDAO.findAll()[1];

        //Paperwork test = new Paperwork("Shoot permission", "/path/to/shoot_perm", "You can shoot on monday", project);
        //Paperwork createdPaperwork = paperworkDAO.create(test);
        //System.out.println(createdPaperwork);

        paperworkDAO.delete(3L);
        Paperwork[] paperworks = paperworkDAO.findManyByProject(project);
        for (Paperwork paperwork : paperworks) {
            System.out.println(paperwork);
        }
    }
}

package com.filmplanner.dao.postgre;

import com.filmplanner.dao.AbstractDAOFactory;
import com.filmplanner.dao.ProjectDAO;
import com.filmplanner.dao.UserDAO;
import com.filmplanner.models.Project;
import com.filmplanner.models.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class PostgreProjectDAO implements ProjectDAO {

    private Connection connection;

    public PostgreProjectDAO(Connection connection) {
        this.connection = connection;
    }


    /*
    Methods
     */

    /**
     * Creates a new Project in the database given an instance of a Project.
     *
     * @param project the Project which will be inserted inside the database
     * @return an instance of the created project with the id generated by the database; null if there was an SQLException
     */
    @Override
    public Project create(Project project) {
        Project createdProject = null;
        try {
            // project insertion statement preparation
            String query = "INSERT INTO project (name, description) VALUES (?, ?)";
            PreparedStatement statement = this.connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, project.getName());
            statement.setString(2, project.getDescription());

            if (statement.executeUpdate() > 0) { // if no rows were altered the request did nothing
                ResultSet resultSet = statement.getGeneratedKeys();
                resultSet.next();
                Long generatedProjectId = resultSet.getLong("project_id");

                for (User manager : project.getManagers()) {
                    // project manager insertion statement preparation
                    query = "INSERT INTO project_manager (project_id, user_id) VALUES (?, ?)";
                    statement = this.connection.prepareStatement(query);
                    statement.setLong(1, generatedProjectId);
                    statement.setLong(2, manager.getId());
                    statement.executeUpdate();
                }

                // TODO for each shoot: create shoot based on project id (ShootDAO)

                // TODO for each paperwork: create paperwork based on project id (PaperworkDAO)

                // TODO add client to project (ClientDAO)

                createdProject = new Project(generatedProjectId, project);
                resultSet.close();
                statement.close();
            }

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return createdProject;
    }

   /*
    @Override
    public Project findById(Long id) {
        Project foundProject = null;
        if (id != null) {
            try {
                String query = "SELECT " +
                        "project.project_id AS project_id, " +
                        "project.name AS project_name, " +
                        "project.description AS project_description, " +
                        "fp_user.user_id as user_id, " +
                        "fp_user.name as user_name, " +
                        "fp_user.email as user_email, " +
                        "fp_user.phonenumber as user_phonenumber, " +
                        "fp_user.password as user_password " +
                        "FROM project, project_manager, fp_user " +
                        "WHERE project.project_id=" + id + " " +
                        "AND project_manager.project_id=" + id + " " +
                        "AND fp_user.user_id=project_manager.user_id";
                PreparedStatement statement = this.connection.prepareStatement(query);
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {

                    if (foundProject == null) {
                        Long projectId = resultSet.getLong("project_id");
                        String projectName = resultSet.getString("project_name");
                        String projectDescription = resultSet.getString("project_description");
                        //foundProject = new Project(projectId, projectName, projectDescription, new HashSet<>());
                    }

                    Long userId = resultSet.getLong("user_id");
                    String userName = resultSet.getString("user_name");
                    String userEmail = resultSet.getString("user_email");
                    String userPhoneNumber = resultSet.getString("user_phonenumber");
                    foundProject.addManager(new User(userId, userName, userEmail, userPhoneNumber));
                }

                resultSet.close();
                statement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return foundProject;
    }

    */

    /**
     * Gets a Project by its id.
     *
     * @param id the Project's id
     * @return the Project corresponding to the given id or null if the id doesn't correspond to any Project.
     */
    public Project findById(Long id) {
        Project foundProject = null;
        if (id != null) {
            try {

                // Finds the project
                String query = "SELECT project_id, name, description FROM project WHERE project_id = " + id;
                PreparedStatement statement = this.connection.prepareStatement(query);;
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    // Fills in project's attributes
                    Long projectId = resultSet.getLong("project_id");
                    String name = resultSet.getString("name");
                    String description = resultSet.getString("description");
                    foundProject = new Project(projectId, name, description);
                }

                // TODO find managers (ProjectDAO)

                // TODO find shoots by project id (ShootDAO)

                // TODO find paperworks by project id (PaperWorkDAO)

                // TODO find client by id (ClientDAO)

                resultSet.close();
                statement.close();

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return foundProject;
    }

    // TODO create findManagersById(Long id)

    /**
     * Gets all Projects of a manager (a User instance).
     *
     * @param manager the manager we want the project of
     * @return an array of Projects containing the manager's projects
     */
    @Override
    public Project[] findManyByManager(User manager) {
        try {
            List<Project> projects = new ArrayList<>();
            String query = "SELECT * FROM project_manager, project WHERE project_id=project_id AND user_id=" + manager.getId();
            PreparedStatement statement = this.connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();



            resultSet.close();
            statement.close();
            return projects.toArray(new Project[0]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /* findByManager

    retrieve list of manager's project's ids

    for each project id
        findProjectById // ProjectDAO
     */

    /**
     * Gets all Projects from the database.
     *
     * @return an array containing all Projects present in the database
     */
    @Override
    public Project[] findAll() {
        try {
            List<Project> projects = new ArrayList<>(); // ArrayList is faster for storing and accessing data
            String query = "SELECT * FROM project";
            PreparedStatement statement = this.connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                // TODO get managers
                //projects.add(new Project(resultSet.getLong("id"), resultSet.getString("name"), resultSet.getString("description")));
            }
            resultSet.close();
            statement.close();
            return projects.toArray(new Project[0]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /* findAll

    retrieve list of all projects ids

    for each project id
        findProjectById // ProjectDAO
     */

    /**
     * Deletes a project from the database given its id.
     *
     * @param id the id of the Project to delete
     */
    @Override
    public void deleteById(Long id) {
        if (id != null) {
            try {
                String query = "DELETE FROM project WHERE project_id=" + id;
                PreparedStatement statement = this.connection.prepareStatement(query);
                statement.executeUpdate();
                statement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /* deleteById

    find shoots by project id // ShootDAO
    for each shoot
        if shoot.date > currentDate
            ERROR: cannot delete this project

    delete paperwork by project id // PaperWorkDAO

    delete managers in project_manager table // ProjectDAO

    remove client from project // ClientDAO
     */

    /**
     * Updates a project in the database given a Project instance.
     * If the id is null or doesn't exist in the database this method does nothing.
     *
     * @param project the Project instance which will be used to update the project corresponding to the given id
     */
    @Override
    public void updateById(Long id, Project project) {
        if (id != null) {
            try {
                String query = "UPDATE project SET name='" + project.getName() + "', " +
                        "description='" + project.getDescription() + "' " +
                        //" client_id=" + project.getClient().getId()
                        "WHERE project_id=" + id;
                PreparedStatement statement = this.connection.prepareStatement(query);
                statement.executeUpdate();
                statement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /* updateById

    update project atomic attributes

     */

    public static void main(String[] args) {
        AbstractDAOFactory factory = PostgreDAOFactory.getInstance();
        ProjectDAO projectDAO = factory.getProjectDAO();

        Project newProject = new Project(null, "JujuRoadtrip", "Roadtrip urbex");
        //projectDAO.create(newProject);


        Project found = projectDAO.findById(28L);
        System.out.println(found);
    }
}
